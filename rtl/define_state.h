`ifndef DEFINE_STATE

// Define States
typedef enum logic [2:0] {
	S_IDLE,
	S_UART_RX,
	S_Milestone2,
	S_Milestone1
} top_state_type;

typedef enum logic [31:0] {
	M1_IDLE,
	LI_0,
	LI_1,
	LI_2,
	LI_3,
	LI_4,
	LI_5,
	LI_6,
	LI_7,
	LI_8,
	LI_9,
	CC_10,
	CC_11,
	CC_12,
	CC_13,
	CC_14,
	CC_15,
	CC_16,
	CC_17,
	CC_18,
	CC_19,
	CC_20,
	CC_21,
	CC_22,	
	CC_23,
	CC_24,
	CC_25,
	CC_26,
	CC_27,
	CC_28,
	CC_29,
	LO_30,
	LO_31,
	LO_32,
	LO_33,
	LO_34,
	LO_35,
	LO_36,
	LO_37,
	LO_38,
	LO_39,
	LO_40,
	LO_41,
	LO_42,
	LO_43,
	LO_44,
	LO_45,
	LO_46,
	LO_47,
	LO_48,
	LO_49,
	LO_50,
	LO_51,
	LO_52,
	LO_53,
	LO_54,
	LO_55,
	LO_56,
	LO_57,
	LO_58,
	LO_59,
	LO_60,
	LO_61,
	LO_62,
	LO_63,
	LO_64,
	LO_65,
	LO_66,
	LO_finish,
	M1_finish
} M1_state_type;

typedef enum logic [31:0] {
	M2_IDLE,
	LI_FS_0,
	LI_FS_1,
	CC_FS_2,
	CC_FS_3,
	CC_FS_4,
	CC_FS_5,
	CC_FS_6,
	CC_FS_7,
	CC_FS_8,
	CC_FS_9,
	LO_FS_10,
	LO_FS_11,
	LO_FS_12,
	LO_FS_13,
	LO_FS_14,
	LO_FS_15,
	LO_FS_16,
	LO_FS_17,
	LO_FS_17_5,
	LI_CT_18,
	LI_CT_19,
	CC_CT_20,
	CC_CT_21,
	CC_CT_22,
	CC_CT_23,
	CC_CT_24,
	CC_CT_25,
	CC_CT_26,
	CC_CT_27,
	LO_CT_28,
	LO_CT_29,
	LO_CT_30,
	LO_CT_31,
	LO_CT_32,
	LO_CT_33,
	LO_CT_34,
	LI_CS_FS_35,
	LI_CS_FS_35_5,
	LI_CS_FS_36,
	LI_CS_FS_37,
	CC_CS_FS_38,
	CC_CS_FS_39,
	CC_CS_FS_40,
	CC_CS_FS_41,
	CC_CS_FS_42,
	CC_CS_FS_43,
	CC_CS_FS_44,
	CC_CS_FS_45,
	LO_CS_FS_46,
	LO_CS_FS_47,
	LO_CS_FS_48,
	LO_CS_FS_49,
	LO_CS_FS_50,
	LO_CS_FS_51,
	LO_CS_FS_52,
	LI_WS_CT_53,
	LI_WS_CT_54,
	LI_WS_CT_55,
	CC_WS_CT_56,
	CC_WS_CT_57,
	CC_WS_CT_58,
	CC_WS_CT_59,
	CC_WS_CT_60,
	CC_WS_CT_61,
	CC_WS_CT_62,
	CC_WS_CT_63,
	LO_WS_CT_64,
	LO_WS_CT_65,
	LO_WS_CT_66,
	LO_WS_CT_67,
	LO_WS_CT_68,
	LO_WS_CT_69,
	LO_WS_CT_70,
	LO_IF_71,
	L2_finish,
	M2_finish

} M2_state_type;

typedef enum logic [1:0] {
	S_RXC_IDLE,
	S_RXC_SYNC,
	S_RXC_ASSEMBLE_DATA,
	S_RXC_STOP_BIT
} RX_Controller_state_type;

typedef enum logic [2:0] {
	S_US_IDLE,
	S_US_STRIP_FILE_HEADER_1,
	S_US_STRIP_FILE_HEADER_2,
	S_US_START_FIRST_BYTE_RECEIVE,
	S_US_WRITE_FIRST_BYTE,
	S_US_START_SECOND_BYTE_RECEIVE,
	S_US_WRITE_SECOND_BYTE
} UART_SRAM_state_type;

typedef enum logic [3:0] {
	S_VS_WAIT_NEW_PIXEL_ROW,
	S_VS_NEW_PIXEL_ROW_DELAY_1,
	S_VS_NEW_PIXEL_ROW_DELAY_2,
	S_VS_NEW_PIXEL_ROW_DELAY_3,
	S_VS_NEW_PIXEL_ROW_DELAY_4,
	S_VS_NEW_PIXEL_ROW_DELAY_5,
	S_VS_FETCH_PIXEL_DATA_0,
	S_VS_FETCH_PIXEL_DATA_1,
	S_VS_FETCH_PIXEL_DATA_2,
	S_VS_FETCH_PIXEL_DATA_3
} VGA_SRAM_state_type;

`define DEFINE_STATE 1
`endif